buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://maven.google.com' }
        maven { url "https://jitpack.io" }
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'com.google.gms:google-services:3.1.1'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.neenbedankt.android-apt'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://jitpack.io" }
    maven { url "https://maven.google.com" }
}


android {
    buildToolsVersion '25.0.0'
    compileSdkVersion 25

    def versionPropsFile = file('../version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def vCode = versionProps['VERSION_CODE'].toInteger()
        def vName = versionProps['VERSION_NAME']
        println "Building versionCode:" + vCode + " and versionName:" + vName

        defaultConfig {
            applicationId "in.sportscafe.nostragamus"
            minSdkVersion 19
            targetSdkVersion 23
            versionCode vCode
            versionName vName
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    signingConfigs {
        release {
            keyAlias 'nostragamus'
            keyPassword 'nostragamus'
            storeFile file('nostragamus.jks')
            storePassword 'nostragamus'
        }
    }

    buildTypes {
        release {
            multiDexEnabled false
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            multiDexEnabled true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
    }

    productFlavors {

        stagePs {
            applicationIdSuffix ".ps"
            manifestPlaceholders = [buildTypeSuffix: "", branchState: "true"]
            resValue "string", "app_name", "Nostra Stage"
            buildConfigField("boolean", "IS_PAID_VERSION", "false")
            buildConfigField("boolean", "IS_ACL_VERSION", "false")
        }

        stagePro {
            applicationIdSuffix ".pro"
            manifestPlaceholders = [buildTypeSuffix: ".pro", branchState: "true"]
            resValue "string", "app_name", "NostraPro Stage"
            buildConfigField("boolean", "IS_PAID_VERSION", "true")
            buildConfigField("boolean", "IS_ACL_VERSION", "false")
        }

        stageProAcl {
            applicationIdSuffix ".acl.pro"
            manifestPlaceholders = [buildTypeSuffix: ".acl.pro", branchState: "true"]
            resValue "string", "app_name", "NostraPro ACL Stage"
            buildConfigField("boolean", "IS_PAID_VERSION", "true")
            buildConfigField("boolean", "IS_ACL_VERSION", "true")
        }

        NostragamusPS {
            applicationIdSuffix ".ps"
            manifestPlaceholders = [buildTypeSuffix: ".ps", branchState: "false"]
            resValue "string", "app_name", "Nostragamus"
            buildConfigField("boolean", "IS_PAID_VERSION", "false")
            buildConfigField("boolean", "IS_ACL_VERSION", "false")
        }

        NostragamusPro {
            applicationIdSuffix ".pro"
            manifestPlaceholders = [buildTypeSuffix: ".pro", branchState: "false"]
            resValue "string", "app_name", "Nostra Pro"
            buildConfigField("boolean", "IS_PAID_VERSION", "true")
            buildConfigField("boolean", "IS_ACL_VERSION", "false")
        }

        NostragamusProAcl {
            applicationIdSuffix ".acl.pro"
            manifestPlaceholders = [buildTypeSuffix: ".acl.pro", branchState: "false"]
            resValue "string", "app_name", "NostraPro ACL"
            buildConfigField("boolean", "IS_PAID_VERSION", "true")
            buildConfigField("boolean", "IS_ACL_VERSION", "true")
        }

        /*local {
            manifestPlaceholders = [buildTypeSuffix: "", branchState: "false"]
            resValue "string", "app_name", "Nostragamus"
            buildConfigField("boolean", "IS_PAID_VERSION", "false")
            buildConfigField("boolean", "IS_ACL_VERSION", "false")
        }

        dev {
            manifestPlaceholders = [buildTypeSuffix: "", branchState: "false"]
            resValue "string", "app_name", "Nostragamus Dev"
            buildConfigField("boolean", "IS_PAID_VERSION", "false")
            buildConfigField("boolean", "IS_ACL_VERSION", "false")
        }*/
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def flavor = variant.productFlavors[0].name
            def ver = variant.versionName
            def newApkName = flavor + "-" + ver + ".apk"
            output.outputFile = new File(output.outputFile.parent, newApkName)
        }
    }
    defaultConfig {
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':jeevalibrary')
    compile('com.crashlytics.sdk.android:crashlytics:2.6.5@aar') {
        transitive = true;
    }
    // To compat for new material designs
    compile('io.branch.sdk.android:library:2.5.1@aar') {
        transitive = true;
    }
    compile('io.fabric.sdk.android:fabric:1.3.10@aar') {
        transitive = true;
    }
    compile project(':NostraCardStack')
    compile project(':materialintro')
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    compile 'com.google.android.gms:play-services-auth:10.2.1'
    compile 'com.moengage:moe-android-sdk:7.7.15'
    compile 'com.moengage:addon-inbox:2.8.0'
    compile 'com.google.android.gms:play-services-gcm:10.2.1'
    compile 'com.google.android.gms:play-services-analytics:10.2.1'
    compile 'com.android.support:cardview-v7:25.2.0'
    compile 'com.amplitude:android-sdk:2.12.0'
    compile 'org.parceler:parceler-api:1.1.6'
    compile 'com.felipecsl:gifimageview:2.1.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'me.relex:circleindicator:1.2.2'
    compile 'com.android.support:support-v4:25.2.0'
    compile 'com.android.support:customtabs:25.2.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.squareup.retrofit2:converter-gson:2.0.2'
    compile 'com.google.firebase:firebase-core:10.2.1'
    compile 'com.google.firebase:firebase-messaging:10.2.1'
    compile 'com.github.freshdesk:freshchat-android:1.2.1'
    compile 'uk.co.chrisjenx:calligraphy:2.1.0'
    compile 'it.sephiroth.android.library.targettooltip:target-tooltip-library:1.3.15'

    testCompile 'junit:junit:4.12'
    apt 'org.parceler:parceler:1.1.6'
}
apply plugin: 'com.google.gms.google-services'
